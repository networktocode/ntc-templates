---
name: "CI"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - "master"
    tags:
      - "v*"
  pull_request: ~

jobs:
  black:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: black"
        run: "poetry run black ./ --diff --check"
  flake8:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: flake8"
        run: "poetry run flake8 ./"
    needs:
      - "black"
  yamllint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v2"
      - name: "Linting: yamllint"
        run: "poetry run yamllint ./"
    needs:
      - "black"
  tests:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install Poetry"
        run: "pip install poetry==1.1.15"
      - name: "Install Python Packages"
        run: "poetry install"
      - name: "Running tests"
        run: "poetry run pytest -v"
    needs:
      - "flake8"
      - "yamllint"
  publish_gh:
    name: "Publish to GitHub"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "${{ '{{ secrets.NTC_GITHUB_TOKEN }}' }}"
          file: "dist/*"
          tag: "${{ '{{ github.ref }}' }}"
          overwrite: true
          file_glob: true
    needs:
      - "tests"
  publish_pypi:
    name: "Push Package to PyPI"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "${{ '{{ secrets.PYPI_API_TOKEN }}' }}"
    needs:
      - "tests"
